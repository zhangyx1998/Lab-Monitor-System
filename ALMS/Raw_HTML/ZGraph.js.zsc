//Code by Yuxuan Zhang
//All Rights Reserved
//Non-profit use are approved

var Debug=false;
var AllowCache=false;
var Auto_upd= undefined;//replace it with milliseconds will make the data update automatically
var GraphList= [];

window.onresize= RESET_ALL_CHART ;

function CacheStr()
{
	if(AllowCache==false)
	{
		var str = Math.random().toString(36).substr(2);
		return '?'+str
	}
	else return ''
}

function RESET_ALL_CHART()
{
	for (i=0;i<GraphList.length;i++)
	{
		//alert(GraphList.length);
		GraphList[i].RESET();
	}
}

if (navigator.userAgent.indexOf("iPhone")>0)
{
	try
	{
		window.addEventListener("orientationchange", RESET_ALL_CHART , false)
	}
	catch(err)
	{
		;
	}
}

function refresh_ALL()
{
	for (i=0;i<GraphList.length;i++)
	{
		//alert(GraphList.length);
		GraphList[i].refresh();
	}
}

var GraphDataPKG =
{
	Left_Axis_Color			:"#FF6600",
	Left_Axis_BKG_Color		:"#FFDDAA",
	Left_Axis_OnGrag_Color	:"#FFBB66",

	Right_Axis_Color		:"#00AAFF",
	Right_Axis_BKG_Color	:"#DDEEFF",
	Right_Axis_OnGrag_Color	:"#BBDDFF",

	Left_Axis_Name			:"Unknown",
	Right_Axis_Name			:"Unknown",

	upd_timestamp			:undefined, //This value will be taken as 'NOW'

	Data_L					:undefined,
	Data_R					:undefined,
}

var GraphStyle =
{
	//----------------------[0]Desktop Device; [1]Mobile Vertical; [2]Mobile Horizational; [3]iPad;
	Default_Mark_line_len:	[5    ,5    ,5    ,5    ],
	Default_Mark_line_wid:	[2    ,2    ,2    ,2    ],
	Default_side_spacing:	[5    ,5    ,5    ,5    ],
	Default_line_width: 	[0.8  ,0.8  ,0.8  ,0.5  ],
	Default_DBG_lineHeight:	[18   ,14   ,14   ,14   ],
	Default_marker_WIDTH:	[40   ,60   ,40   ,40   ],	
	Default_Scale_Index:	[1    ,2    ,1.5  ,1    ],  //Define the Scale Index of fonts
	Default_L_limit:		[240  ,120  ,240  ,120  ],	//Bottom Horizational Axis default display Range
	Default_R_limit:		[0    ,0    ,0    ,0    ],	//Bottom Horizational Axis default display Range
	Default_L_limit_max:	[26279,26279,26279,26279],	//Bottom Horizational Axis default Scale limit (Will Be ReCaculated Later)
	Default_R_limit_min:	[0    ,0    ,0    ,0    ],	//Bottom Horizational Axis default Scale limit (Will Be ReCaculated Later)
	Default_L_max:			[28   ,28   ,28   ,28   ],	//Left Vertical Axis default display Range **IMPORTANT**
	Default_L_min:			[18   ,18   ,18   ,18   ],	//Left Vertical Axis default display Range **IMPORTANT**
	Default_R_max:			[65   ,65   ,65   ,65   ],	//Right Vertical Axis default display Range **IMPORTANT**
	Default_R_min:			[35   ,30   ,30   ,35   ],	//Right Vertical Axis default display Range **IMPORTANT**
	Default_H_Lines:		[5    ,4    ,4    ,5    ],	//Number of horizational Grids **IMPORTANT**
	Default_V_Lines:		[20   ,10   ,15   ,20   ],	//Number of vertical Grids **IMPORTANT**
														//Will Decide the chart ratio if HightOverRide=undefined
	HEIGHT_Banner:			[40   ,40   ,40   ,40   ],	//Top Banner Hight (Not Available Yet)

	On_Scale_Drag_Color:	"#CCCCCC",
	Assist_Line_Color:		"#00CACA",
	Assist_Line_Drag_Color:	"#00CACA",
	Assist_Font_Color:		"#999999",
	Axis_Font_Color:		"#666666",
	Grid_Color:				"#666666",
	Banner_Color: 			"#CCCCCC",//"#00AA88",
	Alert_Color: 			"#FF0000",

	bottom_axis_ratio: 		3600000,// 1 hour = 3600000 milliseconds
	bottom_axis_unit: 		"Hours Ago",

	Display_Banner: 		false, 		//Display Banner
	Move_right_on_refresh:  false,		//the graph will automatically move to "now" on refresh if true
	HightOverRide: 			undefined,	//specify a ratio (Float) If you want to override default ratios
	reverse_bottom_axis: 	false,		//(Not Available Yet)
	reverse_L_axis: 		false,		//(Not Available Yet)
	reverse_R_axis: 		false,		//(Not Available Yet)
	dragg_able: 			true,		//(Not Available Yet)
	left_axis_scale: 		true,		//(Not Available Yet)
	right_axis_scale: 		true,		//(Not Available Yet)
	bottom_axis_scale: 		true,		//(Not Available Yet)
	left_data_assist_line:	true,		//(Not Available Yet)
	right_data_assist_line:	true,		//(Not Available Yet)
}

var ZGraph =
{
	create: function(chart_ID,GraphStyle)
	{
		var object={};//FATAL:DO NOT REMOVE

		//DATA
		var GraphDataPKG;
		var GraphStyle;

		//var timer = setInterval(refresh(evt),100);
		//ARROWS ▶ ◀ ▲ ▼
		//Preset
		var Device=0;//0: Desktop; 1:Mobile; 2:Mobile_Horizational_Orentation 3:Tablet

		//PRE_DEFINED VALUES
			var chart=document.getElementById(chart_ID);
			var ctx=chart.getContext("2d");
				ctx.save();
			var devicePixelRatio = window.devicePixelRatio || 1;
			var backingStoreRatio = ctx.webkitBackingStorePixelRatio ||
								ctx.mozBackingStorePixelRatio ||
								ctx.msBackingStorePixelRatio ||
								ctx.oBackingStorePixelRatio ||
								ctx.backingStorePixelRatio || 1;
			var ratio = devicePixelRatio / backingStoreRatio;

		//Args Adjustments
			if(GraphStyle.Display_Banner==false)
			{
				GraphStyle.HEIGHT_Banner=[0,0,0,0];
			}

		//Global Settings
			var Default_Mark_line_len=	GraphStyle.Default_Mark_line_len;
			var Default_Mark_line_wid=	GraphStyle.Default_Mark_line_wid;
			var Default_side_spacing =	GraphStyle.Default_side_spacing;
			var Default_line_width=		GraphStyle.Default_line_width;
			var Default_L_limit_max=	GraphStyle.Default_L_limit_max;
			var Default_R_limit_min=	GraphStyle.Default_R_limit_min;
			var Default_DBG_lineHeight=	GraphStyle.Default_DBG_lineHeight;
			var Default_marker_WIDTH=	GraphStyle.Default_marker_WIDTH;
			var Default_Scale_Index=	GraphStyle.Default_Scale_Index;
			var Default_L_max=			GraphStyle.Default_L_max;
			var Default_L_min=			GraphStyle.Default_L_min;
			var Default_R_max=			GraphStyle.Default_R_max;
			var Default_R_min=			GraphStyle.Default_R_min;
			var Default_L_limit=		GraphStyle.Default_L_limit;
			var Default_R_limit=		GraphStyle.Default_R_limit;
			var Default_H_Lines=		GraphStyle.Default_H_Lines;
			var Default_V_Lines=		GraphStyle.Default_V_Lines;
			var Default_HEIGHT_Banner=	GraphStyle.HEIGHT_Banner;

		//Style Preset
			var On_Scale_Drag_Color=	GraphStyle.On_Scale_Drag_Color;
			var Assist_Line_Color=		GraphStyle.Assist_Line_Color;
			var Assist_Line_Drag_Color=	GraphStyle.Assist_Line_Drag_Color;
			var Assist_Font_Color=		GraphStyle.Assist_Font_Color;
			var Axis_Font_Color=		GraphStyle.Axis_Font_Color;
			var Grid_Color=				GraphStyle.Grid_Color;
			var Banner_Color=			GraphStyle.Banner_Color;
			var Alert_Color=			GraphStyle.Alert_Color;

		//Scale Preset
			var bottom_axis_ratio= 		GraphStyle.bottom_axis_ratio;
			var bottom_axis_unit= 		GraphStyle.bottom_axis_unit;

		//Will Be changed later:
			var L_limit_max=5;
			var R_limit_min=0;
			var DBG_lineHeight=0;
			var marker_WIDTH=0;
			var Scale_Index=0;
			var max_L=0;
			var min_L=0;
			var max_R=0;
			var min_R=0;
			var L_limit=0;
			var R_limit=0;
			var H_Lines=0;
			var V_Lines=0;
			var Mark_line_len=0;
			var Mark_line_wid=0;
			var side_spacing =0;
			var golbal_line_width=0;

			var chart_ratio=0;
			var Grid_length=0;
			var Mouse_Position_Flag=0;
			var Mouse_Down_Flag=0; //0:None 1:Center_Area 2:Left_Marker 3:Rlght_Marker 4:Bottom_Marker 5:Bottom Axis Line
			var HEIGHT=0
			var HEIGHT_Banner=0;
			var HEIGHT_Chart=0;
			var HEIGHT_Container=0;
			var WIDTH=0;

			var upd_timestamp=0;

		//VARIABLES
			var x=0;
			var y=0;
			var org_x=0;
			var org_y=0;
			var org_L=0;
			var org_R=0;
			var org_max_L=0;
			var org_min_L=0;
			var org_max_R=0;
			var org_min_R=0;

		// Colors Will Be Modified Later
			var Left_Axis_Color=			"#888888";
			var Left_Axis_BKG_Color=		"#AAAAAA";
			var Left_Axis_OnGrag_Color=		"#BBBBBB";
			var Right_Axis_Color=			"#888888";
			var Right_Axis_BKG_Color=		"#AAAAAA";
			var Right_Axis_OnGrag_Color=	"#BBBBBB";

		document.oncontextmenu=function (){return false;}

		chart.onmousedown = function (evt) 
		{
			x = (evt.pageX-chart.offsetLeft)*ratio;
			y = (evt.pageY-chart.offsetTop)*ratio;
			org_x = x;
			org_y = y;
			org_L = L_limit;
			org_R = R_limit;
			org_max_L = max_L;
			org_min_L = min_L;
			org_max_R = max_R;
			org_min_R = min_R;

			Mouse_Down_Flag=object.get_area_id(org_x,org_y);		

			object.refresh();
		}

		chart.onmouseup = function (evt) 
		{
			x = (evt.pageX-chart.offsetLeft)*ratio;
			y = (evt.pageY-chart.offsetTop)*ratio;
			Mouse_Down_Flag=0;
			object.refresh();
		}
		
		chart.onmousemove = function (evt)
		{
			if(evt.which==0)
			{
				Mouse_Down_Flag=0;
			}
			object.refresh_evt(evt);
		}

		chart.ontouchstart = function (evt) 
		{
			x = (evt.pageX-chart.offsetLeft)*ratio;
			y = (evt.pageY-chart.offsetTop)*ratio;
			org_x = x;
			org_y = y;
			org_L = L_limit;
			org_R = R_limit;
			org_max_L = max_L;
			org_min_L = min_L;
			org_max_R = max_R;
			org_min_R = min_R;

			Mouse_Down_Flag=object.get_area_id(org_x,org_y);

			evt.preventDefault();
			if(	false
				|| Mouse_Down_Flag==1
				|| Mouse_Down_Flag==2
				|| Mouse_Down_Flag==3
				|| Mouse_Down_Flag==4
				|| Mouse_Down_Flag==5
				) 
			{
				window.event.returnValue = false;
			}
			else
			{
				window.event.returnValue = true;
			}

			object.refresh();
		}

		chart.ontouchend = function (evt)
		{
			x = (evt.pageX-chart.offsetLeft)*ratio;
			y = (evt.pageY-chart.offsetTop)*ratio;
			Mouse_Down_Flag=0;
			object.refresh();
		}

		chart.ontouchmove= function (evt)
		{
			x = (evt.pageX-chart.offsetLeft)*ratio;
			y = (evt.pageY-chart.offsetTop)*ratio;
			object.refresh (evt);
		}

		object.refresh_evt = function (evt)
		{
			x = (evt.pageX-chart.offsetLeft)*ratio;
			y = (evt.pageY-chart.offsetTop)*ratio;
			object.refresh();
		}

		//------------------------------------------------------------
		//------------------------------------------------------------
		//------------------------------------------------------------

		object.update_data = function (PKG)
		{
			GraphDataPKG=PKG;

			if (GraphDataPKG.upd_timestamp!=undefined)
			{
				upd_timestamp=GraphDataPKG.upd_timestamp;
			}
			else
			{
				upd_timestamp=Date.now();
				//alert(Date.now())
			}

			Left_Axis_Color=		GraphDataPKG.Left_Axis_Color;
			Left_Axis_BKG_Color=	GraphDataPKG.Left_Axis_BKG_Color;
			Left_Axis_OnGrag_Color=	GraphDataPKG.Left_Axis_OnGrag_Color;
			Right_Axis_Color=		GraphDataPKG.Right_Axis_Color;
			Right_Axis_BKG_Color=	GraphDataPKG.Right_Axis_BKG_Color;
			Right_Axis_OnGrag_Color=GraphDataPKG.Right_Axis_OnGrag_Color;

			object.RESET();

			if(GraphDataPKG.Move_right_on_refresh==true)
			{
				var mov_len=R_limit-R_limit_min;
				L_limit-=mov_len;
				R_limit=R_limit_min;
			}

			object.refresh();
		}

		object.graph_grid_gen = function (ctx)
		{
			//Graph Grid Drawing
			//------------------------
			ctx.strokeStyle=Grid_Color;
			ctx.lineWidth = golbal_line_width/2;
			ctx.beginPath();

			//Horizontal Grid
			for (var i=0; i<=H_Lines; i++)
			{ 
				ctx.moveTo(0,HEIGHT_Banner+i*Grid_length);
				ctx.lineTo(WIDTH,HEIGHT_Banner+i*Grid_length);
			}

			//Vertial Grid
			for (var i=0; i<=V_Lines; i++)
			{ 
				ctx.moveTo(i*Grid_length,HEIGHT_Banner+0);
				ctx.lineTo(i*Grid_length,HEIGHT_Banner+HEIGHT_Chart);
			}

			ctx.stroke();
		}

		object.draw_data = function (line_color,ts_table,value_table,scale_ceil,scale_floor)
		{
			ctx.strokeStyle=line_color;
			ctx.lineWidth = golbal_line_width;

			//some code here
			var L_limit_TS=upd_timestamp-L_limit*bottom_axis_ratio;
			var R_limit_TS=upd_timestamp-R_limit*bottom_axis_ratio;

			//alert("L/R Limit "+L_limit_TS+" "+R_limit_TS);
			
			var absX=0;
			var absY=0;
			var val=0;
			var pointer=1;

			while (ts_table[pointer]>R_limit_TS && pointer<ts_table.length) pointer+=1;
			if(pointer>2)pointer-=1;

			if(pointer<ts_table.length)
			{
				//alert("In Circ");
				ctx.beginPath();

				val=value_table[pointer];
				if (val>scale_ceil) val=scale_ceil;
				if (val<scale_floor) val=scale_floor;
				absX=WIDTH*(position_ratio(L_limit_TS,R_limit_TS,ts_table[pointer]));
				absY=HEIGHT_Banner+HEIGHT_Chart*(1-(val-scale_floor)/(scale_ceil-scale_floor));
				ctx.moveTo(absX,absY);
				pointer+=1;

				//alert("Move To "+absX+" "+absY)
				while (true)
				{
					val=value_table[pointer];
					if (val>scale_ceil) val=scale_ceil;
					if (val<scale_floor) val=scale_floor;

					absX=WIDTH*(position_ratio(L_limit_TS,R_limit_TS,ts_table[pointer]));
					absY=HEIGHT_Banner+HEIGHT_Chart*(1-(val-scale_floor)/(scale_ceil-scale_floor));

					ctx.lineTo(absX,absY);

					//alert("Line To "+absX+" "+absY)
					pointer+=1;

					if(absX<0 || absX>WIDTH || pointer==ts_table.length) break;
				}
				ctx.stroke();
			}
		}

		object.graph_content_gen = function (ctx)
		{
			//Graph Content Drawing

			//LEFT AXIS
			if (GraphDataPKG.Data_L!=undefined)
			{
				for(var i=0;i<GraphDataPKG.Data_L.length;i+=1)
				{
					if(GraphDataPKG.Data_L[i].length>=2)
					{
						for(var j=1;j<GraphDataPKG.Data_L[i].length;j+=1)
						{
							if(GraphDataPKG.Data_L[i][j].length>2 && GraphDataPKG.Data_L[i][j][0]!=0)
							{
								//alert("Graph Table L "+i+" "+j);
								object.draw_data(GraphDataPKG.Left_Axis_Color,GraphDataPKG.Data_L[i][0],GraphDataPKG.Data_L[i][j],max_L,min_L);
							}
						}
					}
				}
			}
			//RIGHT AXIS
			if (GraphDataPKG.Data_R!=undefined)
			{
				for(var i=0;i<GraphDataPKG.Data_R.length;i++)
				{
					if(GraphDataPKG.Data_R[i].length>=2)
					{
						for(var j=1;j<GraphDataPKG.Data_R[i].length;j++)
						{
							if(GraphDataPKG.Data_R[i][j].length>2 && GraphDataPKG.Data_R[i][j][0]!=0)
							{
								//alert("Graph Table R "+i+" "+j);
								object.draw_data(GraphDataPKG.Right_Axis_Color,GraphDataPKG.Data_R[i][0],GraphDataPKG.Data_R[i][j],max_R,min_R);
							}
						}
					}
				}
			}
			//alert("exit");
		}

		object.graph_assistline = function (position_x)
		{
			ctx.save();
			var data_tag=Math.floor(L_limit+(R_limit-L_limit)*x/WIDTH)

			//Vertical assistline
			if(Mouse_Down_Flag==1)
			{
				ctx.strokeStyle=Assist_Line_Drag_Color;

				if (Mouse_Down_Flag==1)
				{
					if(L_limit==L_limit_max || R_limit==R_limit_min)
					{
						ctx.strokeStyle=Alert_Color;
					}
				}

				ctx.lineWidth = 1.5;
				if(ratio==2) ctx.lineWidth = 3;
			}
			else if(Mouse_Down_Flag==0)
			{
				ctx.strokeStyle=Assist_Line_Color;
				ctx.setLineDash([10,8]);
				ctx.lineWidth = 1;
				if(ratio==2) ctx.lineWidth = 2;
			}
			ctx.beginPath();
			ctx.moveTo(position_x,HEIGHT_Banner+0);
			ctx.lineTo(position_x,HEIGHT_Banner+HEIGHT_Chart);
			ctx.stroke();
			ctx.restore();

			if (GraphDataPKG!=undefined)
			{
				/*
				ctx.textAlign="center";
				ctx.textBaseline="top";
				ctx.fillStyle="#000000";
				ctx.font="bold italic "+object.font_size_uni_str(12)+" Avenir";

				ctx.fillText("ORG"+data_tag.toString(),WIDTH/2,5)
				ctx.fillText("STP"+(upd_timestamp-data_tag*bottom_axis_ratio).toString(),WIDTH/2,25)
				ctx.fillText("CVT"+data_ts_tag.toString(),WIDTH/2,45)
				*/

				for (var i=0;i<GraphDataPKG.Data_L.length;i++)
				{
					data_ts_tag=find_value(GraphDataPKG.Data_L[i][0],upd_timestamp-data_tag*bottom_axis_ratio);

					for (var j=1;j<GraphDataPKG.Data_L[i].length;j++)
					{
						var Left_Axis_Buf=GraphDataPKG.Data_L[i][j][data_ts_tag];
						//Left Axis assistline
						if(Left_Axis_Buf>min_L && Left_Axis_Buf<max_L && GraphDataPKG.Data_L[i][j][0]>1)
						{
							ctx.strokeStyle=Left_Axis_Color;
							ctx.setLineDash([5,5]);
							ctx.lineWidth = 0.5;
							if(ratio==2) ctx.lineWidth = 1;
							var Left_Axis_Data_axis_Y=HEIGHT_Chart*(1-(Left_Axis_Buf-min_L)/(max_L-min_L));

							ctx.beginPath();
							ctx.moveTo(0,HEIGHT_Banner+Left_Axis_Data_axis_Y);
							ctx.lineTo(WIDTH,HEIGHT_Banner+Left_Axis_Data_axis_Y);
							ctx.stroke();
							ctx.restore();
							ctx.restore();

							//Left Axis Data Tag
							ctx.textAlign="left";
							ctx.textBaseline="top";
							ctx.fillStyle=Left_Axis_Color;
							ctx.font="bold italic "+object.font_size_uni_str(12)+" Arial";

							var axis_x=position_x;
							var axis_y=Left_Axis_Data_axis_Y;
							var horizational_space=4;
							var vertical_space=4;

							if ((WIDTH-axis_x)<(Grid_length*1.5))
							{
								ctx.textAlign="right";
								horizational_space=-4;
							}

							if ((HEIGHT_Chart-axis_y)<Grid_length)
							{
								ctx.textBaseline="bottom";
								vertical_space=-4;
							}

							ctx.fillText(Left_Axis_Buf.toString(),axis_x+horizational_space*ratio,HEIGHT_Banner+axis_y+vertical_space*ratio);
							ctx.restore();
						}
					}			
				}
	
				for (var i=0;i<GraphDataPKG.Data_R.length;i++)
				{
					data_ts_tag=find_value(GraphDataPKG.Data_R[i][0],upd_timestamp-data_tag*bottom_axis_ratio);

					for (var j=1;j<GraphDataPKG.Data_R[i].length;j++)
					{

						var Right_Axis_Buf=GraphDataPKG.Data_R[i][j][data_ts_tag];
						//Right Axis assistline
						if(Right_Axis_Buf>min_R && Right_Axis_Buf<max_R && GraphDataPKG.Data_R[i][j][0]>1)
						{
							ctx.strokeStyle=Right_Axis_Color;
							ctx.setLineDash([5,5]);
							ctx.lineWidth = 0.5;
							if(ratio==2) ctx.lineWidth = 1;
							var Right_Axis_Data_axis_Y=HEIGHT_Chart*(1-(Right_Axis_Buf-min_R)/(max_R-min_R));

							ctx.beginPath();
							ctx.moveTo(0,HEIGHT_Banner+Right_Axis_Data_axis_Y);
							ctx.lineTo(WIDTH,HEIGHT_Banner+Right_Axis_Data_axis_Y);
							ctx.stroke();

							//Right Axis Data Tag
							ctx.textAlign="left";
							ctx.textBaseline="top";
							ctx.fillStyle=Right_Axis_Color;
							ctx.font="bold italic "+object.font_size_uni_str(12)+" Arial";

							var axis_x=position_x;
							var axis_y=Right_Axis_Data_axis_Y;
							var horizational_space=4;
							var vertical_space=4;

							if ((WIDTH-axis_x)<(Grid_length*1.5))
							{
								ctx.textAlign="right";
								horizational_space=-4;
							}

							if ((HEIGHT_Chart-axis_y)<Grid_length)
							{
								ctx.textBaseline="bottom";
								vertical_space=-4;
							}

							ctx.fillText(Right_Axis_Buf.toString(),axis_x+horizational_space*ratio, HEIGHT_Banner+axis_y+vertical_space*ratio);
						}
					}
				}
				
				//Time Tag
				ctx.textAlign="left";
				ctx.fillStyle=Assist_Font_Color;
				ctx.font=object.font_size_uni_str(10)+" Arial";

				var date=new Date(GraphDataPKG.Data_L[0][0][data_ts_tag]);
				Y = date.getFullYear() + '-';
				M = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-';
				D = date.getDate() ;
				h = date.getHours() + ':';
				m = date.getMinutes() + ':';
				s = date.getSeconds(); 
				
				ts_dt=Y+M+D;
				ts_ms=h+m+s;

				var axis_x=position_x;
				var axis_y=Math.ceil(HEIGHT_Chart-Grid_length/3);
				var horizational_space=4;
				var vertical_space=4;

				if ((WIDTH-axis_x)<(Grid_length*1.5))
				{
					ctx.textAlign="right";
					horizational_space=-4;
				}

				ctx.textBaseline="bottom";
				ctx.fillText(ts_dt, axis_x+horizational_space*ratio,HEIGHT_Banner+axis_y+vertical_space*ratio);
				ctx.textBaseline="top";
				ctx.fillText(ts_ms, axis_x+horizational_space*ratio,HEIGHT_Banner+axis_y+vertical_space*ratio);

				ctx.fillText(
					GraphDataPKG.Data_L[0][0][data_ts_tag].toString(),
					axis_x+horizational_space*ratio,
					HEIGHT_Banner+vertical_space*ratio)
				ctx.restore();
				ctx.setLineDash([]);
			}
		}

		object.graph_highlight = function (ctx)
		{
			if(HEIGHT_Banner>0)
			{
				ctx.fillStyle=Banner_Color;
				ctx.fillRect(
					0,0,
					WIDTH,HEIGHT_Banner
					);
			}
			if(Mouse_Down_Flag==0)
			{
				if(Mouse_Position_Flag==2)
				{
					ctx.fillStyle=Left_Axis_BKG_Color;
					ctx.fillRect(
						0,HEIGHT_Banner+0,
						marker_WIDTH,HEIGHT_Chart
						);
				}
				}
				if(Mouse_Position_Flag==3)
				{
					ctx.fillStyle=Right_Axis_BKG_Color;
					ctx.fillRect(
						WIDTH-marker_WIDTH,HEIGHT_Banner+0,
						marker_WIDTH,HEIGHT_Chart
						);
			}
			if(Mouse_Down_Flag==2)
			{
				if(Mouse_Position_Flag==2)
				{
					ctx.fillStyle=Left_Axis_OnGrag_Color;
					ctx.fillRect(
						0,HEIGHT_Banner+0,
						marker_WIDTH,HEIGHT_Chart
						);
				}
				if(Mouse_Position_Flag==1)
				{
					ctx.fillStyle=On_Scale_Drag_Color;
					ctx.fillRect(
						0,HEIGHT_Banner+0,
						marker_WIDTH,HEIGHT_Chart
						);
				}
			}
			if(Mouse_Down_Flag==3)
			{
				if(Mouse_Position_Flag==3)
				{
					ctx.fillStyle=Right_Axis_OnGrag_Color;
					ctx.fillRect(
						WIDTH-marker_WIDTH,HEIGHT_Banner+0,
						marker_WIDTH,HEIGHT_Chart
						);
				}
				if(Mouse_Position_Flag==1)
				{
					ctx.fillStyle=On_Scale_Drag_Color;
					ctx.fillRect(
						WIDTH-marker_WIDTH,HEIGHT_Banner+0,
						marker_WIDTH,HEIGHT_Chart
						);
				}
			}
		}

		object.graph_marker_gen = function (ctx)
		{
			//Changing Variables
			var Padding_space=0;
			//Left Marker
			ctx.textAlign="left";
			ctx.fillStyle=Left_Axis_Color;

			if (Mouse_Down_Flag==1)
			{
				if(L_limit==L_limit_max)
				{
					ctx.fillStyle=Alert_Color;
				}
			}

			ctx.font="Bold "+object.font_size_uni_str(12)+" Arial";
			var max_Marker=max_L;
			var min_Marker=min_L;
			for (var i=0; i<=H_Lines; i++)
			{
				ctx.textBaseline="middle";
				if(i==0) ctx.textBaseline="top";
				if(i==H_Lines) ctx.textBaseline="bottom";
				var MARK=min_Marker+((H_Lines-i)/(H_Lines))*(max_Marker-min_Marker);
				ctx.fillText(format_F(MARK,2),0+side_spacing*ratio,HEIGHT_Banner+i*Grid_length);
			}

			//Left Mark lines
			ctx.strokeStyle=Left_Axis_Color;

			if (Mouse_Down_Flag==1)
			{
				if(L_limit==L_limit_max)
				{
					ctx.strokeStyle=Alert_Color;
				}
			}

			ctx.beginPath();
			ctx.lineWidth=Mark_line_wid;
			ctx.moveTo(Mark_line_wid/2,HEIGHT_Banner+0);
			ctx.lineTo(Mark_line_wid/2,HEIGHT_Banner+HEIGHT_Chart);
			ctx.stroke();
			for (var i=0; i<=H_Lines; i++)
			{
				ctx.beginPath();
				Padding_space=0;
				if(i==0) Padding_space=Mark_line_wid/2;
				if(i==H_Lines) Padding_space=-Mark_line_wid/2;
				ctx.lineWidth=Mark_line_wid;
				ctx.moveTo(0+Mark_line_wid,HEIGHT_Banner+i*Grid_length+Padding_space);
				ctx.lineTo(Mark_line_len+Mark_line_wid,HEIGHT_Banner+i*Grid_length+Padding_space);
				ctx.stroke();
				if(i<H_Lines)
				{
					for(var j=1;j<5;j++)
					{
						ctx.lineWidth=Math.floor(Mark_line_wid/2);
						ctx.beginPath();
						ctx.moveTo(0+Mark_line_wid,HEIGHT_Banner+i*Grid_length+j*Grid_length/5);
						ctx.lineTo(Mark_line_len/1.5+Mark_line_wid,HEIGHT_Banner+i*Grid_length+j*Grid_length/5);
						ctx.stroke();
					}
				}
			}
			ctx.stroke();

			//Right Marker
			ctx.textAlign="right";
			ctx.fillStyle=Right_Axis_Color;

			if (Mouse_Down_Flag==1)
			{
				if(R_limit==R_limit_min)
				{
					ctx.fillStyle=Alert_Color;
				}
			}

			ctx.font="Bold "+object.font_size_uni_str(12)+" Arial";
			var max_Marker=max_R;
			var min_Marker=min_R;
			for (var i=0; i<=H_Lines; i++)
			{
				ctx.textBaseline="middle";
				if(i==0) ctx.textBaseline="top";
				if(i==H_Lines) ctx.textBaseline="bottom";
				var MARK=min_Marker+((H_Lines-i)/(H_Lines))*(max_Marker-min_Marker);
				ctx.fillText(format_F(MARK,2),WIDTH-side_spacing*ratio,HEIGHT_Banner+i*Grid_length);
			}
			//Right Mark lines
			ctx.strokeStyle=Right_Axis_Color;

			if (Mouse_Down_Flag==1)
			{
				if(R_limit==R_limit_min)
				{
					ctx.strokeStyle=Alert_Color;
				}
			}

			ctx.beginPath();
			ctx.lineWidth=Mark_line_wid;
			ctx.moveTo(WIDTH-Mark_line_wid/2,HEIGHT_Banner+0);
			ctx.lineTo(WIDTH-Mark_line_wid/2,HEIGHT_Banner+HEIGHT_Chart);
			ctx.stroke();
			for (var i=0; i<=H_Lines; i++)
			{
				ctx.beginPath();
				Padding_space=0;
				if(i==0) Padding_space=Mark_line_wid/2;
				if(i==H_Lines) Padding_space=-Mark_line_wid/2;
				ctx.lineWidth=Mark_line_wid;
				ctx.moveTo(WIDTH-Mark_line_wid,HEIGHT_Banner+i*Grid_length+Padding_space);
				ctx.lineTo(WIDTH-Mark_line_len-Mark_line_wid,HEIGHT_Banner+i*Grid_length+Padding_space);
				ctx.stroke();
				if(i<H_Lines)
				{
					for(var j=1;j<5;j++)
					{
						ctx.lineWidth=Math.floor(Mark_line_wid/2);
						ctx.beginPath();
						ctx.moveTo(WIDTH-Mark_line_wid,HEIGHT_Banner+i*Grid_length+j*Grid_length/5);
						ctx.lineTo(WIDTH-Mark_line_len/1.5-Mark_line_wid,HEIGHT_Banner+i*Grid_length+j*Grid_length/5);
						ctx.stroke();
					}
				}
			}
			ctx.stroke();

			//Buttom Marker
			ctx.fillStyle=Axis_Font_Color;
			ctx.font="Bold "+object.font_size_uni_str(12)+" Arial";
			var max_Marker=L_limit;
			var min_Marker=R_limit;
			var Marker_Count=5;
			var height_axis=0;
			for (var i=0; i<=Marker_Count; i++)
			{
				height_axis=Math.floor(HEIGHT_Chart+HEIGHT_Container/10);
				ctx.textAlign="center";
				if(i==0) ctx.textAlign="left";
				if(i==Marker_Count) ctx.textAlign="right";
				ctx.textBaseline="top";
				var MARK=min_Marker+(1-i/(Marker_Count))*(max_Marker-min_Marker);
				if(Math.floor(MARK)<=0)
				{
					ctx.font="Bold "+object.font_size_uni_str(12)+" Arial";
					ctx.fillText("NOW",i*WIDTH/Marker_Count,HEIGHT_Banner+height_axis);
					height_axis+=(HEIGHT_Container/10+object.font_size_uni(12));
					ctx.font="Bold "+object.font_size_uni_str(8)+" Arial";
					ctx.fillText("Real Time",i*WIDTH/Marker_Count,HEIGHT_Banner+height_axis);
				}
				else
				{
					ctx.font="Bold "+object.font_size_uni_str(12)+" Arial";
					ctx.fillText(Math.ceil(MARK-0.00000001).toString(),i*WIDTH/Marker_Count,HEIGHT_Banner+height_axis);
					height_axis+=(HEIGHT_Container/10+object.font_size_uni(12));
					ctx.font="Bold "+object.font_size_uni_str(8)+" Arial";
					ctx.fillText(bottom_axis_unit,i*WIDTH/Marker_Count,HEIGHT_Banner+height_axis);
				}
			}
			ctx.restore();
		}

		object.graph_mouse_track = function (ctx)
		{
			if(
				(
				( Mouse_Position_Flag==1 || Mouse_Position_Flag==5) 
				&& ( Mouse_Down_Flag==0 || Mouse_Down_Flag==1 || Mouse_Down_Flag==5 )
				|| (Mouse_Down_Flag==0 && (Mouse_Position_Flag==2 || Mouse_Position_Flag==3)))
			   )
			{
				object.graph_assistline(x);
			}
			if (Debug)
			{
				var Pedding=object.commom_DBG();
				var MARK="X"+x.toString()+" Y"+y.toString();
				ctx.fillText(MARK,WIDTH/2,Grid_length+Pedding);
				Pedding+=DBG_lineHeight;
			}
		}

		object.graph_clear = function ()
		{
			chart.width=WIDTH.toString();
			chart.height=HEIGHT.toString();
		}

		object.graph_gen = function ()
		{
			chart=document.getElementById(chart_ID);
			ctx=chart.getContext("2d");
			ctx.save();

			object.graph_highlight(ctx);
			ctx.restore();

			object.graph_grid_gen(ctx);
			ctx.restore();

			if (GraphDataPKG!=undefined) object.graph_content_gen(ctx);
			ctx.restore();

			object.graph_mouse_track(ctx);
			ctx.restore();

			object.graph_marker_gen(ctx);
			ctx.restore();

			if(Debug) object.commom_DBG();

			return ctx;
		}

		object.refresh = function ()
		{
			if(Mouse_Position_Flag!=object.get_area_id(x,y))
			{
				org_x = x;
				org_y = y;
				org_L = L_limit;
				org_R = R_limit;
				org_max_L = max_L;
				org_min_L = min_L;
				org_max_R = max_R;
				org_min_R = min_R;
			}
			Mouse_Position_Flag=object.get_area_id(x,y)

			//Main Graph Area Drag (Move,Horizational)
			if(Mouse_Down_Flag==1 && Mouse_Position_Flag==1)
			{
				var distence=(org_x-x)*(org_R-org_L)/WIDTH;
				var New_L=Math.floor(org_L+distence);
				var New_R=Math.floor(org_R+distence);
				if(New_L>L_limit_max)
				{
					New_R-=(New_L-L_limit_max);
					New_L=L_limit_max;
				}
				if(New_R<R_limit_min)
				{
					New_L+=(R_limit_min-New_R);
					New_R=R_limit_min;
				}		
				if(New_L>L_limit_max) New_L=L_limit_max;
				L_limit=New_L;
				R_limit=New_R;
			}

			//Left Marker Area Drag (Move,Vertiacl)
			if(Mouse_Down_Flag==2 && Mouse_Position_Flag==2)
			{
				var distence=((org_max_L-org_min_L)*(y-org_y)/HEIGHT_Chart);
				var New_Max=org_max_L+distence;
				var New_Min=org_min_L+distence;
				max_L=New_Max;
				min_L=New_Min;
			}

			//Left Marker Area Drag (Scale,Vertiacl)
			if(Mouse_Down_Flag==2 && Mouse_Position_Flag==1)
			{
				var distence=((org_max_L-org_min_L)*(y-org_y)/HEIGHT_Chart);
				var New_Max=org_max_L+distence;
				var New_Min=org_min_L-distence;
				if (New_Max<New_Min)
				{
					var temp=New_Max;
					New_Max=New_Min;
					New_Min=temp;
				}
				max_L=New_Max;
				min_L=New_Min;
			}

			//Right Marker Area Drag (Move,Vertiacl)
			//_____________________________________
			if(Mouse_Down_Flag==3 && Mouse_Position_Flag==3)
			{
				var distence=((org_max_R-org_min_R)*(y-org_y)/HEIGHT_Chart);
				var New_Max=org_max_R+distence;
				var New_Min=org_min_R+distence;
				max_R=New_Max;
				min_R=New_Min;
			}

			//Right Marker Area Drag (Scale,Vertiacl)
			//_____________________________________
			if(Mouse_Down_Flag==3 && Mouse_Position_Flag==1)
			{
				var distence=((org_max_R-org_min_R)*(y-org_y)/HEIGHT_Chart);
				var New_Max=org_max_R+distence;
				var New_Min=org_min_R-distence;
				if (New_Max<New_Min)
				{
					var temp=New_Max;
					New_Max=New_Min;
					New_Min=temp;
				}
				max_R=New_Max;
				min_R=New_Min;				}

			//Bottom Marker Area Drag (Scale,Horizational)
			//_____________________________________
			if(Mouse_Down_Flag==4 && (Mouse_Position_Flag==4 ||Mouse_Position_Flag==5 ||Mouse_Position_Flag==1))
			{
				var distence=Math.ceil((x-org_x)*ratio/(WIDTH/(L_limit-R_limit)));
				var New_L=org_L+distence;
				var New_R=org_R-distence;
				if (New_L>L_limit_max) New_L=L_limit_max;
				if (New_R<R_limit_min) New_R=R_limit_min;
				if (New_L<New_R)
				{
					var temp=New_L;
					New_L=New_R;
					New_R=temp;
				}
				L_limit=New_L;
				R_limit=New_R;
			}
			if (L_limit>L_limit_max) L_limit=L_limit_max;
			if (R_limit<R_limit_min) R_limit=R_limit_min;
			object.graph_clear();
			object.graph_gen();
		}
	//<!--######################################################################################-->
		object.font_size_uni_str = function (size_def)
		{
			return object.font_size_uni(size_def).toString()+"px";
		}

		object.font_size_uni = function (size_def)
		{
			return Math.ceil(size_def*ratio*Scale_Index);
		}

		object.get_area_id = function (ax,ay)
		{

			if ( ay>=(HEIGHT_Banner+HEIGHT_Chart-4) && ay<=(HEIGHT_Banner+HEIGHT_Chart+HEIGHT_Container) )
	   		{
	   			if(ay>(HEIGHT_Banner+HEIGHT_Chart+5))return 4;
	   			else return 5;
	   		}
			else if(ay<=HEIGHT_Banner+HEIGHT_Chart && ay>HEIGHT_Banner+Grid_length/6 && ax>0 && ax<WIDTH)
			{
				if(ax<=marker_WIDTH) return 2;
				else if(ax<=WIDTH-marker_WIDTH) return 1;
				else return 3;
			}
			return 0;

		}

		object.commom_DBG = function ()
		{

			var Pedding=0;
			ctx.fillStyle="#000";
			ctx.font=object.font_size_uni_str(12)+" Arial thin";
			ctx.textAlign="center";
			ctx.textBaseline="top";

			var MARK="▶ In Debug Mode ◀";
			ctx.fillText(MARK,WIDTH/2,Grid_length+Pedding);
			Pedding+=DBG_lineHeight;

			var MARK="  ratio "+format_F(ratio,1)+
					 "  Device "+format_F(Device,0);
			ctx.fillText(MARK,WIDTH/2,Grid_length+Pedding);
			Pedding+=DBG_lineHeight;

			var MARK="  offsetLeft "+format_F(chart.offsetLeft,2)+
					 "  offsetTop "+format_F(chart.offsetTop,2);
			ctx.fillText(MARK,WIDTH/2,Grid_length+Pedding);
			Pedding+=DBG_lineHeight;

			var MARK="  Html_Width "+document.getElementById(chart_ID).offsetWidth+
					 "  Html_Height "+document.getElementById(chart_ID).offsetHight;
			ctx.fillText(MARK,WIDTH/2,Grid_length+Pedding);
			Pedding+=DBG_lineHeight;

			var MARK="  Width "+WIDTH.toString()+
					 "  Height "+HEIGHT_Chart.toString();
			ctx.fillText(MARK,WIDTH/2,Grid_length+Pedding);
			Pedding+=DBG_lineHeight;

			var MARK="  HEIGHT "+format_F(HEIGHT,0)+
					 "  HEIGHT_Banner "+format_F(HEIGHT_Banner,0)+
					 "  HEIGHT_Chart "+format_F(HEIGHT_Chart,0)+
					 "  HEIGHT_Container "+format_F(HEIGHT_Container,0);
			ctx.fillText(MARK,WIDTH/2,Grid_length+Pedding);
			Pedding+=DBG_lineHeight;

			var MARK="  L_limit_max "+format_F(L_limit_max,0)+
					 "  R_limit_min "+format_F(R_limit_min,0)+
					 "  marker_WIDTH "+format_F(marker_WIDTH,0)+
					 "  chart_ratio "+format_F(chart_ratio,4);
			ctx.fillText(MARK,WIDTH/2,Grid_length+Pedding);
			Pedding+=DBG_lineHeight;

			var MARK="  max_L "+format_F(max_L,0)+
					 "  min_L "+format_F(min_L,0)+
					 "  max_R "+format_F(max_R,0)+
					 "  min_R "+format_F(min_R,0);
			ctx.fillText(MARK,WIDTH/2,Grid_length+Pedding);
			Pedding+=DBG_lineHeight;


			var MARK="  L_limit "+format_F(L_limit,0)+
					 "  R_limit "+format_F(R_limit,0)+
					 "  H_Lines "+format_F(H_Lines,0)+
					 "  V_Lines "+format_F(V_Lines,0);
			ctx.fillText(MARK,WIDTH/2,Grid_length+Pedding);
			Pedding+=DBG_lineHeight;

			var MARK="Mouse Down "+Mouse_Down_Flag.toString()+"  Mouse Pos "+Mouse_Position_Flag.toString();
			ctx.fillText(MARK,WIDTH/2,Grid_length+Pedding);
			Pedding+=DBG_lineHeight;

			return Pedding;
		}

		object.DBG_addStr = function (str,Pedding)
		{
			var MARK=str;
			ctx.fillText(MARK,WIDTH/2,Grid_length+Pedding);
			Pedding+=DBG_lineHeight;

			return Pedding;
		}

		object.RESET_ALL = function ()
		{		
			object.RESET();	
			max_L=Default_L_max[Device];
			min_L=Default_L_min[Device];
			max_R=Default_R_max[Device];
			min_R=Default_R_min[Device];
			L_limit=Default_L_limit[Device];
			R_limit=Default_R_limit[Device];
			object.refresh();
		}

		object.RESET = function ()
		{
			Device=0;

			if ( 
			navigator.userAgent.indexOf("iPhone")>0 
			|| navigator.userAgent.indexOf("UCWEB")>0 
			|| navigator.userAgent.indexOf("Android")>0 
			|| navigator.userAgent.indexOf("android")>0
			)Device=1;

			if ( 
			navigator.userAgent.indexOf("iPad")>0 
			)Device=3;

			if (navigator.userAgent.indexOf("iPhone")>0) 
				{
					try
					{
						if (window.orientation==90 || window.orientation==-90)
						{
							Device=2;
						}
					}
					catch(err)
					{
						;
					}
				}

			Scale_Index=		Default_Scale_Index[Device];
			L_limit_max=		Default_L_limit_max[Device];
			R_limit_min=		Default_R_limit_min[Device];
			DBG_lineHeight=		Default_DBG_lineHeight[Device]	*Scale_Index*ratio;
			marker_WIDTH=		Default_marker_WIDTH[Device]	*Scale_Index*ratio;
			H_Lines=			Default_H_Lines[Device];
			V_Lines=			Default_V_Lines[Device];
			Mark_line_len=		Default_Mark_line_len[Device]	*Scale_Index*ratio;
			Mark_line_wid=		Default_Mark_line_wid[Device]	*Scale_Index*ratio;
			side_spacing =		Default_side_spacing [Device]	*Scale_Index*ratio;
			golbal_line_width = Default_line_width[Device]		*Scale_Index*ratio;
			HEIGHT_Banner = 	Default_HEIGHT_Banner[Device]	*ratio;

			if (GraphDataPKG!=undefined && upd_timestamp!=undefined && upd_timestamp!=0)
			{
				var min_timestamp=upd_timestamp;
				if (GraphDataPKG.Data_L!=undefined)
					{
						//alert(GraphDataPKG.Data_L[0][1].length);
						for(var i=0;i<GraphDataPKG.Data_L.length;i++)
						{
							ts_cur_min=GraphDataPKG.Data_L[i][0][GraphDataPKG.Data_L[i][0].length-1];
							if(ts_cur_min<min_timestamp)
							{
								min_timestamp=ts_cur_min;
							}
						}
					}
				if (GraphDataPKG.Data_R!=undefined)
					{
						//alert(GraphDataPKG.Data_L[0][1].length);
						for(var i=0;i<GraphDataPKG.Data_R.length;i++)
						{
							ts_cur_min=GraphDataPKG.Data_R[i][0][GraphDataPKG.Data_R[i][0].length-1];
							if(ts_cur_min<min_timestamp)
							{
								min_timestamp=ts_cur_min;
							}
						}
					}
				//alert(GraphDataPKG.Data_R[0][0].length)
				//alert(min_timestamp)
				L_limit_max=Math.ceil((upd_timestamp-min_timestamp)/bottom_axis_ratio);
				//alert(L_limit_max)
			}
			if (L_limit>L_limit_max) L_limit=L_limit_max;
			if (R_limit<R_limit_min) R_limit=R_limit_min;

			chart_ratio=(H_Lines+0.5*Scale_Index)/V_Lines;

			WIDTH=parseInt(document.getElementById(chart_ID).offsetWidth)*ratio;
			HEIGHT=Math.floor(WIDTH*chart_ratio);

			HEIGHT_Chart=Math.floor(HEIGHT*H_Lines/(H_Lines+0.5*Scale_Index));
			HEIGHT_Container=HEIGHT-HEIGHT_Chart;
			if (HEIGHT_Container<(65*Scale_Index) || true)
			{
				HEIGHT_Container=65*Scale_Index;
				HEIGHT=HEIGHT_Chart+HEIGHT_Container;
			}
			Grid_length=HEIGHT_Chart/H_Lines;
			HEIGHT+=HEIGHT_Banner;
			chart.style.height=(Math.floor(HEIGHT/ratio)).toString()+"px";
			chart.width=WIDTH.toString();
			chart.height=HEIGHT.toString();
			
			object.graph_gen();
		}
		object.RESET_ALL();
		GraphList.push(object);
		return object
	}
};

function position_ratio(left,right,val)
{
	//alert("Ratio Position "+left+" "+right+" "+val);
	var res=(val-left)/(right-left);
	//alert("Ratio Position "+res);
	return res;
}

function ratio_position(left,right,ratio)
{
	//alert("Ratio Position "+left+" "+right+" "+val);
	var res=left+ratio*(right-left);
	//alert("Ratio Position "+res);
	return res;
}

function find_value(ts_table,ts)
{
	var pointer=1;
	var dist=ts_table[1]-ts;
	var bset_match_pointer=1;
	for (pointer=1;pointer<ts_table.length;pointer+=1)
	{
		if (Math.abs(ts_table[pointer]-ts)<dist)
		{
			dist=Math.abs(ts_table[pointer]-ts);
			bset_match_pointer=pointer;
		}
	}
	return bset_match_pointer;
}

function format_F(x,n)
{
	var minus_flag=x>0?false:true;
	x=x>0?x:-x;
	int_x=Math.floor(x);
	x-=int_x;
	for (var i=0;i<n;i++) x*=10;
	flo_x=Math.floor(x);
	if (n<=0) return int_x.toString();
	return int_x.toString()+"."+flo_x.toString();
}

function DBG_Switch()
{
	Debug=!Debug;
	refresh_ALL();
}

document.write('<script src="style.js'+CacheStr()+'" type="text/javascript"></script>')

function source_upd()
{
	script = document.createElement("script");
	script.type = "text/javascript";
	script.src = "data.js"+CacheStr();
	//alert(CacheStr());
	document.body.appendChild(script);
}

setTimeout(source_upd,50);